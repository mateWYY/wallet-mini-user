<template>
  <import src="../../wxParse/wxParse.wxml"/>
  <repeat for="{{htmlParser}}" item="items">
    <view class="paragraph-box">
      <view class="htmlTitle">
        <text>{{items.title}}</text>
      </view>
      <block wx:for="{{items.html.nodes}}" wx:key="{{index}}" item="item" index="index">
        <template is="wxParse{{index}}" data="{{item}}"/>
      </block>
    </view>
  </repeat>
</template>

<script>
  import wepy from 'wepy'
  import WxParse from '../wxParse/wxParse'

  export default class html2wxml extends wepy.component {
    props = {
      parserName: {
        type: String,
        default: 'htmlParserName'
      },
      parserContent: {
        type: String,
        default: '',
        twoWay: true
      },
      parserType: {
        type: String,
        default: 'html'
      },
      parserPadding: {
        type: Number,
        default: 5
      }
    }
    data = {
      htmlParser: [],
      content: []
    }
    events = {
      'htmlParser-broadcast': ($event, ...args) => {
        console.log($event)
      }
    }
    methods = {
      htmlParserNotice(val) {
        this.htmlParse(val)
      }
    }

    wxParseImgLoad(image) {
      let imgInfo = image.detail
      console.log(imgInfo)
    }
    htmlParse(content) {
      this.content = []
      this.htmlParser = []
      /**
       * WxParse.wxParse(bindName , type, data, target,imagePadding)
       * 1.bindName绑定的数据名(必填)
       * 2.type可以为html或者md(必填)
       * 3.data为传入的具体数据(必填)
       * 4.target为Page对象,一般为this(必填)
       * 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选)
       */
      if (typeof content.userProblem !== 'undefined') {
        this.content = content.userProblem.map((item, index) => {
          return item.content
        })
      }
      try {
        for (let i = 0; i < this.content.length; i++) {
          let htmlContent = WxParse.wxParse(this.parserName, this.parserType, this.content[i], this, this.parserPadding)
          this.htmlParser.push({
            title: content.userProblem[i].title,
            html: htmlContent[this.parserName]
          })
        }
      } catch (e) {
        console.warn('kinerHtmlParser:', '没有任何内容需要转换', e)
      }
    }
  }
</script>

<style lang="stylus">
  @import "../stylus/wxparse.styl"

  .htmlTitle
    font-size: 30rpx
    color: #000000
    font-weight: bold
  .wxParse-inline
    font-size: 26rpx
    color: #666666
  .paragraph-box
    margin: 20rpx 0
</style>

